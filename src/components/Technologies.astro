---
import Java from "../components/icons/Java.astro";
import JavaScript from "../components/icons/JavaScript.astro";
import TypeScript from "../components/icons/TypeScript.astro";
import Python from "../components/icons/Python.astro";
import PHP from "../components/icons/PHP.astro";

import React from "../components/icons/React.astro";
import Angular from "../components/icons/Angular.astro";
import Vue from "../components/icons/Vue.astro";

import Spring from "../components/icons/Spring.astro";
import Express from "../components/icons/Express.astro";
import FastAPI from "../components/icons/FastAPI.astro";

import MySQL from "../components/icons/MySQL.astro";
import MariaDB from "../components/icons/MariaDB.astro";
import PostgreSQL from "../components/icons/PostgreSQL.astro";
import MongoDB from "../components/icons/MongoDB.astro";

import Docker from "../components/icons/Docker.astro";
import GoogleCloud from "../components/icons/GoogleCloud.astro";

import CSS from "../components/icons/CSS.astro";
import Tailwind from "../components/icons/Tailwind.astro";
import Bootstrap from "../components/icons/Bootstrap.astro";

import Vite from "../components/icons/Vite.astro";
import NPM from "../components/icons/NPM.astro";

// Define tus tecnologías con sus nombres y el componente de icono correspondiente
const technologies = [
  // Lenguajes de Programación
  { section: "Lenguajes", name: "Java", icon: Java },
  { section: "Lenguajes", name: "JavaScript", icon: JavaScript },
  { section: "Lenguajes", name: "TypeScript", icon: TypeScript },
  { section: "Lenguajes", name: "Python", icon: Python },
  { section: "Lenguajes", name: "PHP", icon: PHP },

  // Frameworks Frontend
  { section: "Frontend", name: "React", icon: React },
  { section: "Frontend", name: "Angular", icon: Angular },
  { section: "Frontend", name: "Vue.js", icon: Vue },

  // Frameworks Backend
  { section: "Backend", name: "Spring", icon: Spring },
  { section: "Backend", name: "Express.js", icon: Express },
  { section: "Backend", name: "FastAPI", icon: FastAPI },

  // Bases de Datos
  { section: "Bases de Datos", name: "MySQL", icon: MySQL },
  { section: "Bases de Datos", name: "MariaDB", icon: MariaDB },
  { section: "Bases de Datos", name: "PostgreSQL", icon: PostgreSQL },
  { section: "Bases de Datos", name: "MongoDB", icon: MongoDB },

  // DevOps y Cloud
  { section: "DevOps y Cloud", name: "Docker", icon: Docker },
  { section: "DevOps y Cloud", name: "Google Cloud", icon: GoogleCloud },

  // CSS Frameworks
  { section: "CSS", name: "CSS", icon: CSS },
  { section: "CSS", name: "Tailwind", icon: Tailwind },
  { section: "CSS", name: "Bootstrap", icon: Bootstrap },

  // Build Tools
  { section: "Herramientas", name: "Vite", icon: Vite },
  { section: "Herramientas", name: "NPM", icon: NPM },
];

// Definir el tipo para una tecnología
type Technology = {
  section: string;
  name: string;
  icon: any;
};

// Agrupar las tecnologías por sección
const technologiesBySection = technologies.reduce(
  (acc, tech) => {
    if (!acc[tech.section]) acc[tech.section] = [];
    acc[tech.section].push(tech);
    return acc;
  },
  {} as Record<string, Technology[]>
);
---

<div class="relative w-full max-w-4xl mx-auto my-8">
  <div class="relative overflow-hidden p-4">
    <div
      id="technologies-carousel-container"
      class="flex transition-transform duration-500 ease-in-out"
    >
      {
        technologies.map((tech) => (
          <div class="flex-none w-1/4 p-2">
            <div class="flex flex-col items-center justify-center text-center bg-gray-200 dark:bg-gray-800 rounded-lg p-3 h-full transition-colors duration-300 hover:bg-gray-200 dark:hover:bg-gray-700">
              <div class="w-12 h-12 flex items-center justify-center mb-2">
                {tech.icon && (
                  <tech.icon class="text-gray-800 dark:text-gray-100 w-full h-full" />
                )}
              </div>
              <p class="text-xs font-semibold text-gray-700 dark:text-gray-300">
                {tech.name}
              </p>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<!-- Listas de tecnologías por sección -->
<div class="mt-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
  {
    Object.entries(technologiesBySection).map(([section, techs]) => (
      <div class="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 shadow-md">
        <h3 class="text-lg font-bold mb-3 text-gray-800 dark:text-gray-200">
          {section}
        </h3>
        <ul class="space-y-2">
          {techs.map((tech: Technology) => (
            <li class="flex items-center space-x-3">
              <div class="w-4 h-4 flex-shrink-0 flex items-center justify-center">
                <tech.icon class="w-full h-full" />
              </div>
              <span class="text-sm text-gray-700 dark:text-gray-300">
                {tech.name}
              </span>
            </li>
          ))}
        </ul>
      </div>
    ))
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById(
      "technologies-carousel-container"
    );
    if (!container) {
      console.error("Carousel container not found.");
      return;
    }

    const items = Array.from(container.children);
    const itemsPerView = 4;
    const totalItems = items.length;

    // Clonar elementos para crear un bucle infinito
    for (let i = 0; i < itemsPerView; i++) {
      items.forEach((item) => {
        const clone = item.cloneNode(true);
        container.appendChild(clone);
      });
    }

    let currentPosition = 0;
    const speed = 1.3; // Pixels per frame

    const moveCarousel = () => {
      currentPosition -= speed;
      const itemWidth = container.offsetWidth / itemsPerView;

      if (currentPosition <= -itemWidth * totalItems) {
        currentPosition += itemWidth * totalItems;
      }

      container.style.transform = `translateX(${currentPosition}px)`;
      requestAnimationFrame(moveCarousel);
    };

    // Iniciar el movimiento del carrusel
    requestAnimationFrame(moveCarousel);

    // Ajustar el carrusel cuando cambie el tamaño de la ventana
    window.addEventListener("resize", () => {
      const itemWidth = container.offsetWidth / itemsPerView;
      currentPosition = -(currentPosition % (itemWidth * totalItems));
      container.style.transform = `translateX(${currentPosition}px)`;
    });
  });
</script>

<style>
  #technologies-carousel-container {
    display: flex;
    transition: none;
  }
  #technologies-carousel-container > div {
    flex: 0 0 25%;
  }

  #technologies-carousel-container .w-12 svg {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .w-4 svg {
    width: 100%;
    height: 100%;
  }
</style>
